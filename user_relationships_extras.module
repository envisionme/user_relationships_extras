<?php
/**
* Implementation of hook_block
*/

//~ drupal_add_js(drupal_get_path('module', 'jobhistoryfield').'/jobhistoryfield.js');

function user_relationships_extras_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == "list") {
    // Generate listing of blocks from this module, for the admin/block page
    $block = array();
    $block[0]["info"] = t('Mutual Contacts');
    $block[1]["info"] = t('People You Might Know');
    $block[2]["info"] = t('Facebook-Style Status Form');
    $block[3]["info"] = t('Pending Contact Requests');
    $block[4]["info"] = t('User contact list');
    return $block;
  } // end if
  else if($op == 'view' && $delta == 0) {
    /**
     * Mutual Contacts
     */
    $output = '';
    global $user;
    $suggested_contacts = array();
    //~ check to see if user is not anonymous and not viewing his own profile
    if ($user->uid > 0 && get_uid_from_url() != $user->uid)
      $current_user = $user->uid;
    else
      return;
    $relationship_status = '1';
    //~ $tolerance = 4;
    $list_size = 3;
    $viewed_user = get_uid_from_url();
    $result = db_query('SELECT user_relationships.rid AS rid,
                        users_user_relationships.name AS name,
                        users_user_relationships.uid AS uid,
                        users_user_relationships.picture AS picture,
                        user_relationship_types_user_relationships.plural_name AS plural_name,
                        roles.rid AS role,
                        RAND() as _random
                        FROM {user_relationships} user_relationships
                        LEFT JOIN {users} users_user_relationships ON user_relationships.requestee_id = users_user_relationships.uid
                        LEFT JOIN {users} users_user_relationships_1 ON user_relationships.requester_id = users_user_relationships_1.uid
                        LEFT JOIN {users_roles} roles ON roles.uid = users_user_relationships.uid
                        LEFT JOIN {user_relationship_types} user_relationship_types_user_relationships ON user_relationships.rtid = user_relationship_types_user_relationships.rtid
                        WHERE (user_relationships.approved = "%s") AND (user_relationships.requester_id = %d)
                        ORDER BY _random ASC', $relationship_status, $viewed_user
    );
    while ($row = db_fetch_object($result)) {
      if (!(in_array($row->uid, $suggested_contacts)))
        $relationship = db_query('SELECT rid FROM {user_relationships} WHERE (requestee_id = %d AND requester_id = %d) OR (requestee_id = %d AND requester_id = %d)', $current_user, $row->uid, $row->uid, $current_user);
      if (((db_fetch_object($relationship))) && (!($current_user == $row->uid)) && $row->role == 4) {
        $suggested_contacts[] = $row->uid;
      }
      if (count($suggested_contacts) >= $list_size)
        break(1);
    }
    // if (empty($suggested_contacts))
      // $output .= t('No Mutual Contacts');

    foreach ($suggested_contacts as $suggested) {
      $output .= njs_list_contacts($suggested);
    }
    // set up the block
    $block = array();
    $block['subject'] = 'Mutual Contacts';
    $block['content'] = $output;
    return $block;
  }
  else if($op == 'view' && $delta == 1) {
    /**
     * People You Might Know
     */
    $output = '';
    global $user;
    //~ check for anonymous users
    if ($user->uid > 0)
      $current_user = $user->uid;
    else
      return;
    $relationship_status = '1';
    $tolerance = 4;
    $list_size = 3;

    //~ Create array of contacts
    $result = db_query_range('SELECT user_relationships.rid AS rid,
                        users_user_relationships.name AS name,
                        users_user_relationships.uid AS uid,
                        users_user_relationships.picture AS picture,
                        user_relationship_types_user_relationships.plural_name AS plural_name,
                        roles.rid AS role,
                        RAND() as _random
                        FROM {user_relationships} user_relationships
                        LEFT JOIN {users} users_user_relationships ON user_relationships.requestee_id = users_user_relationships.uid
                        LEFT JOIN {users} users_user_relationships_1 ON user_relationships.requester_id = users_user_relationships_1.uid
                        LEFT JOIN {users_roles} roles ON roles.uid = users_user_relationships.uid
                        LEFT JOIN {user_relationship_types} user_relationship_types_user_relationships ON user_relationships.rtid = user_relationship_types_user_relationships.rtid
                        WHERE (user_relationships.approved = "%s") AND (user_relationships.requester_id = %d)
												GROUP BY users_user_relationships.uid
                        ORDER BY _random ASC', $relationship_status, $current_user, 0, $tolerance);

    while ($row = db_fetch_object($result)) {
      if ($row->role == 4)
        $contacts[] = $row->uid;
    }

    $suggested_contacts = array();

    $current = 0;
    while (isset($contacts[$current])) {
      $result = db_query('SELECT user_relationships.rid AS rid,
                        users_user_relationships.name AS name,
                        users_user_relationships.uid AS uid,
                        users_user_relationships.picture AS picture,
                        user_relationship_types_user_relationships.plural_name AS plural_name,
                        roles.rid AS role,
                        RAND() as _random
                        FROM {user_relationships} user_relationships
                        LEFT JOIN {users} users_user_relationships ON user_relationships.requestee_id = users_user_relationships.uid
                        LEFT JOIN {users} users_user_relationships_1 ON user_relationships.requester_id = users_user_relationships_1.uid
                        LEFT JOIN {users_roles} roles ON roles.uid = users_user_relationships.uid
                        LEFT JOIN {user_relationship_types} user_relationship_types_user_relationships ON user_relationships.rtid = user_relationship_types_user_relationships.rtid
                        WHERE (user_relationships.approved = "%s") AND (user_relationships.requester_id = %d)
												GROUP BY users_user_relationships.uid
                        ORDER BY _random ASC', $relationship_status, $contacts[$current]
      );

      while ($row = db_fetch_object($result)) {
        if (!(in_array($row->uid, $suggested_contacts)))

          //~ Test if current user is already contacts
          //~ $relationship = user_relationships_type_load(267, NULL);
          $relationship = db_query('SELECT rid FROM {user_relationships} WHERE (requestee_id = %d AND requester_id = %d) OR (requestee_id = %d AND requester_id = %d)', $current_user, $row->uid, $row->uid, $current_user);
          if ((!(db_fetch_object($relationship))) && (!($current_user == $row->uid)) && $row->role == 4) {
            $suggested_contacts[] = $row->uid;
          }
        if (count($suggested_contacts) >= $list_size)
          break(2);
      }
      $current++;
    }

    if (empty($suggested_contacts))
      $output .= t('No suggestions');

    foreach ($suggested_contacts as $suggested) {
      $output .= _theme_contact_full($suggested);
    }

    $block = array();
    $block['subject'] = 'People You Might Know';
    $block['content'] = $output;
    return $block;
  }
  else if($op == 'view' && $delta == 2) {
    /**
     * Facebook-Style Status Form
     */
    global $user;
    $profile = user_load(get_uid_from_url());
		$is_contact = user_relationships_load(array("approved" => 1, "between" => array($profile->uid, $user->uid)), array('count' => true));
		//~ Make sure only applicants and friends can see this
    if ((!in_array('applicant', $user->roles) || $is_contact <= 0) && $user->uid != $profile->uid)
			return;
    if ($user->uid == $profile->uid)
			$output = 'Set a new status: ';
		else
			$output = 'Write a message: ';

    $output .= theme('facebook_status_form_display', $profile);

    $block = array();
    $block['subject'] = '';
    $block['content'] = $output;
    return $block;
  }
  else if($op == 'view' && $delta == 3) {

    $output = '';

    //Relationship Requests Block
    global $user;

    $relationships = user_relationships_load(array('user' => $user->uid, 'requestee_id' => $user->uid, 'approved' => FALSE), array('include_user_info' => TRUE));

    if ((count($relationships) > 0) && (arg(1) == $user->uid)) {
      $count = 1;
      foreach ($relationships as $relationship) {
        if(count($relationships) == $count ) {
          $class = 'pending last';
        } else {
          $class = 'pending';
        }
        $output .= _theme_contact_full($relationship->requester_id, $name = TRUE, $user_relationship = $relationship);
        $output .= '<div class="'. $class .'">' . l('Confirm', t('user/@req_uid/relationships/requested/@reqstee/approve', array('@req_uid' => $user->uid, '@reqstee' => $relationship->rid)) , array('query' => array('destination' => 'user/'. arg(1) .'/admin'),'attributes' => array('class' => 'user_relationships_popup_link btn')));
        $output .= ' | '. l('Ignore', t('user/@req_uid/relationships/requested/@reqstee/disapprove', array('@req_uid' => $user->uid, '@reqstee' => $relationship->rid)) , array('query' => array('destination' => 'user/'. arg(1) .'/admin'),'attributes' => array('class' => 'user_relationships_popup_link'))).'</div>';
        $count = $count + 1;
      }

      $block['subject'] = 'Pending Contact Requests';
      $block['content'] = $output;
    }
    else {
      $block['subject'] = '';
      $block['content'] = '';
    }
    return $block;
  }
  // User contact list
  else if($op == 'view' && $delta == 4) {
    $output = '<p><b>Following:</b></p>';
    $uid = arg(1);

    // Get following
    $user_flags = flag_get_user_flags('user', NULL, $uid);
    if ($user_flags['follow_user'] > 0) {
      foreach ( $user_flags['follow_user'] as $follow_user_flag ) {
        $output .= njs_list_contacts($follow_user_flag->content_id);
      }
    }
    else {
      $output .= 'Not following anyone yet.';
    }

    // Get followers
    $output .= '<div style="clear: both"></div><br />';
    $output .= '<p><b>Followers:</b></p>';

    $flag = flag_get_flag('follow_user');
    
    $result = db_query('SELECT uid FROM {flag_content} WHERE (content_id = "%s") AND (fid = "%s")', $uid, $flag->fid);

    $followers_empty = true;
    while ($row = db_fetch_object($result)) {
      $followers_empty = false;
      $output .= njs_list_contacts($row->uid);
    }

    if( $followers_empty )
      $output .= 'No followers yet.';

    $block = array();
    $block['subject'] = 'Contacts';
    $block['content'] = $output;
    return $block;
  }
} // end user_relationships_extras_block


/**
 * Implementation of hook_theme().
 */
function user_relationships_extras_theme() {

  return array(
    'contact_small' => array(
      'arguments' => array('uid' => NULL)
    ),

    /*// Theme article heartbeat node
    'heartbeat_article' => array(
      'arguments' => array('message' => NULL, 'node' => NULL)
    ),

    // Theme Showcase heartbeat node
    'heartbeat_showcase_item' => array(
      'arguments' => array('message' => NULL, 'node' => NULL)
    ),

    // Theme agenda or event group post
    'heartbeat_event' => array(
      'arguments' => array('message' => NULL, 'node' => NULL)
    ),

    // Theme album group post
    'heartbeat_album' => array(
      'arguments' => array('message' => NULL, 'node' => NULL)
    ),

    // Video content box
    'heartbeat_video' => array(
      'arguments' => array('nid' => NULL,'movie' => NULL, 'image' => NULL)
    ),

    // Friends box
    'heartbeat_friends' => array(
      'arguments' => array('message' => NULL)
    ),/**/
  );
}

/**
 * Theme function for a heartbeat article
 */
function theme_contact_small($uid) {
  //~ usage: theme('heartbeat_group_post', $uid);
  $output = '';

  return $output;
}

/**
* Implementation of hook_views_plugins().
*/
function user_relationships_extras_views_plugins() {
  return array(
    'access' => array(
      'relationships' => array(
        'title' => t('User has relationship'),
        'help' => t('User has relationship'),
        'handler' => 'user_relationships_extras_plugin_has_relationships',
        'help topic' => 'access-none',
        'uses options' => TRUE,
      ),
    )
  );
}

// Check if user has access to view relationship
function views_has_relationship() {
  global $user;

  if ($is_user = user_load(arg(1))) {
      $uid = $is_user->uid;
  } elseif ($is_node = node_load(arg(1))) {
      $uid = $is_node->uid;
  } else {
      $uid = arg(1);
  }

  if ($user->uid == 1 || $user->uid == $uid) {
      return TRUE;
  }

  $params = array('between' => array($user->uid, $uid));
  return (bool) user_relationships_load($params, array('count' => TRUE));
}
